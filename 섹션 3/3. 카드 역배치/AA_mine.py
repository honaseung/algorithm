#와우 기출이래 ㅋㅋ 쫄?? ㅋㅋ
import sys
#sys.stdin = open('input.txt')

#문제와는 별개로 또 다시 떠오른 생각!!
#리스트에서 index 를 키값처럼 활용하고 싶을때는
#리스트에 들어가는 값들이 단순해야 한다.
#예를 들면 0 과 1 또는 True, False 처럼
#아니면 count 값처럼!!
#흠 이렇게 적고보니 단순해야한다는 기준이 좀 어렵긴하다.

#또 한가지
#for 문을 사용한다는것은 포인터를 고정한다는 의미도 있다고본다.
#이중 for 문을 사용한다면 첫번째 idx 는 고정되고 두번쨰 idx 만 변경 되었다가
#나중에 첫번째 idx 가 변경되니까.

#파이선에서 두 값을 변경하는 방법을 잊지말자
#a, b = b, a

twntArr = list(range(1, 21))
#i -> _ 가 되어도 된다.
#왜냐면 i 를 아예 안쓰니까.
for i in range(10) :
    ai, bi = map(int, input().split())
    
    #으휴 바부야!!
    #inVal = input().split()
    #ai = int(inVal[0])
    #bi = int(inVal[1])


    #시작점과 끝점을 주었고 그걸 역순하라 하니
    #단번에 떠오른건 슬라이스 역순이지만
    #슬라이스 역순을 써서 추출한 리스트를
    #다시 집어넣는 for 구문이 또 필요할듯하다.
    #그러니 여기선 슬라이스 기능은 지양한다.

    #여기서부터 함수화가 가능하지만 굳이 해주진 않았다.

    #문제 예시를 잘 보면 ai = 5, bi = 10
    #일때 index 상으로는 4 부터 9 까지이다.
    #이걸 맞춰주기 위해 range(ai - 1, bi) 로 작업한다.
    #하지만 교차로 바꿔주는 작업이기에 bi - 1 까지 작업할 이유가 없다.
    #오히려 여기서는 그렇게 해준다면 문제가 발생한다.
    #따라서 중간 index 까지만 작업할 수 있도록 range 를 잡아준다.
    #여기서 중요한건 몇 번 작업하는가에 집중했다는 것이다.
    times = (bi - ai) // 2 + 1
    #시작 index 는 중복 사용되길래 그냥 변수화 시켰다.
    strtIdx = ai - 1
    #bi 에서 시작하여 하나씩 변경해주기위한 index
    k = 0
    for j in range(strtIdx, strtIdx + times) :
        #파이선에서 값을 교환하는 방법이 따로 있으니 임시 저장 변수가 필요없다.
        tmp = twntArr[j]
        #-index 로 접근하기 위한 수학공식?? 뭐 암튼 그런거
        #-len(리스트) = -(현재 index) + 현재 -index 
        #ex) -20 = -(19) + -1
        #이게... 아닌가?? ㅋㅋ

        #위의 공식이 맞는지는 몰라도 적어도
        #이 문제에서의 index 접근은 이러하다.
        #아래의 index 접근법은 반드시 알아둬야 할 것 같은데
        #강의에서 더 좋은 접근법이 있다면 그걸 알아두자.

        #bi 에 해당하는 index 는 bi - 1 이다.
        #여기 문제에서는 그렇다.
        #k 를 -1 로 초기화 해줘도 되지만
        #모든 문제에서 k 를 -1 로 초기화 해줘도 된다는
        #보장이 없어서 0 으로 초기화했다.
        twntArr[j] = twntArr[bi - k - 1]
        twntArr[bi - k - 1] = tmp
        k += 1
for x in twntArr :
    print(x, end = " ")

#생각이 너무 깊고 복잡했다.
#무언가 너무 규칙성을 찾으려고 했어.
#사실 그럴 필요없이 k 라는 변수 하나만 빨리 추가했다면 진즉 끝났을 코드.
import sys
#sys.stdin = open('in3.txt')

#센세는 ch 리스트를 3개 만들어서
#row 체크용 ch, col 체크용 ch, square 체킄용 ch
#리스트들의 sum 으로 판단
#당연하게도 리스트들의 초기값은 0 으로 하면서
#체크 될때마다 1 로 변경 시켜준다.

#내 발상과 다른점은 중복이라는 키워드에 딱히 연연하지 않았고
#또한 기존 자료형이나 함수들에 크게 연연하지 않았다는 것이다.
#누가 더 훌륭하냐를 논하기는 어렵지만
#둘 다 잘 알아둬야 한다.
#아니야 지금은 시간이 없으니 그냥 강의 보자.

#음 센세 방식 알았으니 한번 센세방식대로 짜볼까.
#나에게는 필요한 연습이다.
#나는 잘 쓰지 않는 방식이라서
#전역변수 조심하자.
#ch1 = ch2 = ch3 = [0] * 10
#나는 함수를 전부 나누어서 처리했는데
#센세는 하나로 퉁쳐버렸다.
def check(a: list) :
    for i in range(9) :
        ch1 = [0] * 10
        ch2 = [0] * 10
        for j in range(9) :
            #i 는 고정 j 는 이동
            #행체크
            ch1[a[i][j]] = 1
            #열체크
            ch2[a[j][i]] = 1
            #행체크와 열체크를 동시에
            #진행하고있다.
            #효율적이다.
        if sum(ch1) != 9 or sum(ch2) != 9 :
            return False
        for i in range(3) :
            for j in range(3) :
                ch3 = [0] * 10
                for k in range(3) :
                    for m in range(3) :
                        #idx 컨트롤을 리스트에 접근할때 해준다.
                        #나는 for 문에서 제어했다.
                        #내 방식이 나한테는 편하다.
                        #j = 1 일때 j * 3 으로 1 행 두번째 그룹을 표현하였다.
                        ch3[a[i * 3 + k][j * 3 + m]] = 1
            #for 문 안에 속할 구문인지 아닌지를
            #제대로 파악하자.
            if sum(ch3) != 9 :
                return False
    return True
#input 값들이 숫자니까 가능한 풀이이다.
#효율적이고 알아두면 유용한 방법들이다.
#리스트를 idx 를 활용하여 마치
#딕셔너리처럼 활용하는 방식이다.
#다만 제한적인 방식임에는 틀림없다.

a = [list(map(int, input().split())) for _ in range(9)]
if check(a) :
    print('YES')
else :
    print('NO')

#이따 밤에 다시 돌아올게 아마도 ㅋㅋ
#너 틀렸더라 ㅋㅋ 이거 센세코드 보고 짠건데 임마!!
#잘 좀 하자 ㅋㅋ